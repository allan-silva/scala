import scala.collection.mutable
import ChecksumAccumulator.calculate

// To this work:
  // 1) compile deps scalac ChecksumAccumulator.scala
  // 2) Run scala classes.scala
@main def m() =
  // Using the companion object.
  println(calculate("Calling companion obj method"))

  // Case class creation
  val person = Person("allan", 34)
  println(person.toString)
  print(person.appendToName(" silva"))


// Defining a case classes
// Case classes is convenient way to tell to compile generates several methods and fields
// like toString, hashCode, constructor parametes turns class fields.
// Companion object is automatically implemented
// Also apply factory method is defined
case class Person(name: String, age: Int):
  def appendToName(suffix: String): Person =
    Person(s"$name$suffix", age)

// The compiler will not generate any method that we define
// Bellow, the apply method will not be generated by case class
object Person:
  def apply(name: String, age: Int): Person =
    val capitalizeName =
      if !name.isEmpty then
        val firstChar = name.charAt(0).toUpper
        val restOfName = name.substring(1)
        s"$firstChar$restOfName"
      else throw new IllegalArgumentException("Empty name")
    new Person(capitalizeName, age)
